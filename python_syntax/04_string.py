#############################################################
#                                                           #
#                           STRING                          #
#                                                           #
#############################################################

# 작은 따옴표 3개 혹은 큰 따옴표 3개를 써서 여러 줄의 문자열을 생성할 수 있습니다.


sample = '''안녕하세요? 
반가워요
내이름은 
파이썬 입니다.'''

print(sample)

# 1) 포맷팅, 길이, 인덱싱, 슬라이싱

# 문자열 출력 (포맷팅)
# print() : 출력
print('헬로우 파이썬')

print('문자열 첫째', '그리고, 둘째')

# %를 사용한 출력
# %s -> 문자열
# %d -> 정수
# %f -> 실수
# %c : 문자 1개

print("안녕하세요? %s" % ('반갑습니다.'))

print('안녕하세요? %.2f' % (0.123456))
print('이것은 실수이다. %.4f' % (0.12))

# '안녕하세요? 0.1235'
print('안녕하세요? %d' % (3.12345))

# [출력]
# 3


print('안녕하세요? %c' % ('a')) # 문자 1개만 올 수 있다.
# [출력]

# '안녕하세요? a'


# {} 와 format를 사용한 출력

print('웰컴투? {}'.format('파이썬.'))
print('환영합니다. {}번째 고객님!!'.format(1))
# [출력]
# 웰컴투? 파이썬.
# 환영합니다. 1번째 고객님!!

print('비밀번호 {}'.format(486))
# [출력]
# '비밀번호 486'

# 소수점 2자리 까지 제한하는 경우 (그 이하자리는 반올림)
print('원주율? {:.2f}'.format(3.141592))
# [출력]
# '원주율? 3.14'

# f 문자열 포맷팅 (python 3.6 이상만 지원)

name = '펭수'
age = 10
print(f'나의 이름은 {name}입니다. 나이는 {age} 살입니다.') # js의 리터럴 포맷팅과 같음


# [출력]
# 나의 이름은 펭수입니다. 나이는 10 살입니다.

print(f'내년에 저는 {age+1} 살입니다.')
# [출력]
# 내년에 저는 11 살입니다.

d = {'name':'펭수', 'age':10}
print(f"반가워요. 저는 {d['name']}입니다. 저의 나이는 {d['age']} 살입니다.")

test = {'class': '사과반', 'name': '영수', 'age': 10}
print(f'나는 한국 초등학교 {test['class']}에 다니는 {test["age"]}살 {test["name"]}입니다.')
# [출력]
# 반가워요. 저는 펭수입니다. 저의 나이는 10 살입니다.

# 문자열 길이
# 영문 (alphabet)

print(len('banana'))
# [출력]
# 6

# 공백은 길이에 포함됩니다.

# len('banana pen')
# [출력]

# 10
# 한글

# len('한글')
# [출력]
# 2

# 공백은 길이에 포함됩니다.

print(len('한글 킹왕짱'))
# [출력]
# 6

# 인덱싱 (indexing)

# 문자열에서 한 개의 글자(char)를 조회하기 위해서는 []를 활용한 인덱싱으로 조회할 수 있습니다.
a = 'Python is my life'
print(a[0])

# [출력]
# 'P'

print(a[-2])
# [출력]
# 'f'

# 슬라이싱 (Slicing)

# 슬라이싱의 활용: [start:stop:step] 을 명시하여 부분을 추출할 수 있습니다.
a = 'Python is my life'

# [:]을 활용하여 전체를 추출할 수 있습니다.

print(a[:])
# [출력]

# 'Python is my life'

# [start:]는 시작 index 부터 끝까지 추출합니다.
print(a[3:])
print(a[5:])

# 'hon is my life'

print(a[-4:])

# [출력]
# 'life'

# [:end]는 처음부터 end 전까지 추출합니다.

print(a[:6])
# [출력]
# 'Python'

print(a[:-3])
# [출력]


# 'Python is my l'
# [start:end]는 start부터 end 전까지 추출합니다.

print(a[3:6])
# [출력]

# 'hon'

# [start:stop:step]에서 step 지정시 step만큼 건너 뛰면서 추출합니다.

print(a[::2])
# [출력]
# 'Pto sm ie'

# 역순으로 출력하기 위해서는 step을 -1로 지정합니다.

print(a[::-1])
print(a[1:14])
# [출력]

# 'efil ym si nohtyP'


# 불변(immutable)
# 문자열은 index를 통해 값을 수정 및 변경이 불가합니다.

# 하지만 메서드(method)로 변경할 수 있습니다.

a = 'Python is my life'
# index에 값을 할당하여 변경하려는 경우

# a[2] = 'Y' # Error
print(a) 

##############################################################################################################################

# 연습문제

# 변수 a를 활용하여 문자열 포맷팅으로 출력하세요

# print() 를 사용합니다.

a = 1234
# # 코드를 입력해 주세요
print(f'a의 값은 {a}입니다.')
# [출력]

# a의 값은 1234입니다
# 변수 a, b를 활용하여 문자열 포맷팅으로 출력하세요

# 단, a, b의 값은 소수 3째짜리까지 출력하고, 그 이하는 반올림합니다.

a = 3.141592
b = 6.181112
# 코드를 입력해 주세요
print('a: %.3f' % a, 'b: %.3f' % b )
print(f'a: {a:.3f}, b: {b:.3f}')

# [출력]

# a의 값은 3.142, b의 값은 6.181입니다

# 문자열 "210101-1234567"을 인덱싱 하여 성별을 나타내는 숫자를 출력 하세요

registration_number =  '210101-1234567'
# # 코드를 입력해 주세요
print(registration_number[-7])
# [출력]
# '1'


# 문자열 '20210101Sunny'를 슬라이싱하여 날짜는 date변수에 날씨는 weather 변수에 저장 후 출력 하세요

sample = '20210101Sunny'
# # 코드를 입력해 주세요

date = sample[:-5]
weather = sample[-5:]

print(date, weather)
# [출력]
# date: 20210101, weather: Sunny

# (문자열 슬라이싱을 활용)자동차 번호가 다음과 같을 때 뒤에 4자리만 출력하세요.

license_plate = "13나 5645"
# # 코드를 입력해 주세요
print(license_plate[-4:])
# [출력]

# 5645

##############################################################################################################################

# 2) 문자열의 덧셈과 곱셈, List, Set

# 연결: 문자열의 덧셈
# 덧셈은 문자열을 연결합니다.

a = '반갑습니다!'
b = '웰컴 투 파이썬'

print(a + b)
# [출력]

# '반갑습니다!웰컴 투 파이썬'
# 복제: 문자열의 곱셈
# 문자열을 곱한 숫자 만큼 반복하여 생성합니다.

print(a * 2)
# [출력]
# '반갑습니다!반갑습니다!'

print('abc ' * 5)
print('===' * 7)

# [출력]
# abc abc abc abc abc 
# =====================


# 리스트(list)

# 문자열을 리스트(list)로 타입 변환이 가능합니다.

# 타입 변환시 한 글자를 요소로 갖는 리스트가 생성됩니다.

print(list('ABCDE')) # js의 split(' ')과 같음

# [출력]
# ['A', 'B', 'C', 'D', 'E']

# 세트(set)
# 한 글자를 요소로 갖는 세트가 생성됩니다.

# 세트의 특성상 요소를 생성한 후 중복된 글자는 제거됩니다.

print(set('AAABBBCCC'))
# 중복이 제거된 리스트로 생성하기 위해서는 list로 다시 타입 변환합니다.

print(list(set('AAABBBCCC')))
# ['B', 'A', 'C']

##############################################################################################################################

# 연습문제
# 다음 중 a, b, c에서 공통으로 사용된 알파벳(공백 포함)을 출력하세요.

# list 형식으로 출력하세요.

a = 'Hello, World'
b = 'World To World'
c = 'world to world'

# # 코드를 입력해 주세요
set_a = set(a)
set_b = set(b)
set_c = set(c)

print(list(set_a & set_b & set_c))
# [출력]

# [' ', 'd', 'l', 'o', 'r']

##############################################################################################################################

# 3) 문자열(텍스트)을 다루는 다양한 기능

# 문자열만 가지고 있는 고유의 편한 기능들이 있습니다.

# 우리는 이들 중 몇 가지를 배워 앞으로 유용하게 활용할 예정입니다.

# split() : 분리
# split은 문장을 특정 규칙에 의해 쪼개 주는 기능을 합니다.

# 분리한 결과는 list 형식으로 값을 return 받습니다.

a = 'This is a pen'
# 기본 값으로 공백이 지정되어 있습니다. 즉, 공백을 기준으로 분리하여 리스트로 반환합니다.

print(a.split())
# [출력]

# ['This', 'is', 'a', 'pen']
# 기본 값인 공백에서 특정 문자로 지정할 수 있습니다.

a = 'This-is-a-pen'
print(a.split('-'))
# [출력]
# ['This', 'is', 'a', 'pen']

# 한글도 동일하게 적용됩니다.

a = '한글은 어떻게 될까요?'
print(a.split())
# [출력]
# ['한글은', '어떻게', '될까요?']

# join() : 합치기
# 결합하고자 하는 문자에 .join() 안에 리스트를 지정하여 결합할 수 있습니다.

print('-'.join(['010',  '1234', '5678']))
# [출력]

print('--'.join('ABCDE'))
# [출력]
# 'A-B-C-D-E'

# lower(), upper() : 소문자 / 대문자로 만들기
a = 'My name is Teddy'

# 소문자로 변경

print(a.lower())
# [출력]
# 'my name is teddy'

# 대문자로 변경

print(a.upper())
# [출력]
# 'MY NAME IS TEDDY'

# 한글에는 대소문자 구분이 없습니다.

a = '한글엔 대소문자가 없어요ㅠ'
print(a.lower())
# [출력]

# '한글엔 대소문자가 없어요ㅠ'

# a.upper()
# [출력]

# '한글엔 대소문자가 없어요ㅠ'


# startswith() : 시작하는
# 지정한 문자열로 시작하면 True, 그렇지 않다면 False를 반환합니다.

result = '01 파이썬 기초예제'

print(result.startswith('01'))

# [출력]
# True

print(result.startswith('02'))
# [출력]
# False

# endswith() : 끝나는

# 지정한 문자열로 끝나면 True, 그렇지 않다면 False를 반환합니다.

print(result.endswith('예제'))
# [출력]
# True

print(result.endswith('.jpg'))
# [출력]

# False

##############################################################################################################################

# 연습문제
# sample 변수를 활용하여 다음의 출력을 가지도록 문자열을 분리하세요

sample = 'abc-def.789/100'
# # 코드를 입력해 주세요
print(sample.split('.'))
# [출력]
# ['abc-def', '789/100']

# # 코드를 입력해 주세요
print(sample.split('-'))
# [출력]
# ['abc', 'def.789/100']


# 리스트를 Python is too interesting 이라는 문자열로 출력하세요

sample = ['Python', 'is', 'too', 'interesting']
# # 코드를 입력해 주세요
print(' '.join(sample))
print(' * '.join(sample))
# [출력]
# 'Python * is * too * interesting'

phone_number = ['010', '1234', '5678']
# # 코드를 입력해 주세요
print('-'.join(phone_number))
# [출력]

# '010-1234-5678'

##############################################################################################################################

# 4) Replace() : 문자열 바꾸기, 공백 제거
# 문자열에 replace(바꿀 대상, 바꾸려는 문자열) 지정하여 문자열을 변경합니다.

# 결과는 복사본이 만들어져 반환됩니다.

a = '01-sample.png'
print(a.replace('.png', '.jpg'))
print(a)
# [출력]

# '01-sample.jpg'

# 불필요한 공백 제거
a = '    01-sample.png                '
b = '     02-sdsdsdsd'
print(a)

# [출력]

# 01-sample.png                
# strip은 불필요한 공백을 제거해 줍니다.
# 복사본 출력

# strip() : 양쪽 공백 제거
print(a.strip())
print(a)

print(b.strip())
print(b)

# [출력]
# '01-sample.png'

from auto_commit import git_auto_push
git_auto_push('string')

